# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files (x86)\\IVI Foundation\\IVI\\Bin\\LaGen.dll'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
import comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0
from comtypes import BSTR
from comtypes import CoClass
import comtypes.gen._47ED5121_A398_11D4_BA58_000064657374_0_2_0



# values for enumeration 'LambdaGenPSErrorCodesEnum'
E_LAMBDAGENPS_PERSONALITY_NOT_ACTIVE = -2147204591
E_LAMBDAGENPS_PERSONALITY_NOT_INSTALLED = -2147204590
E_LAMBDAGENPS_PERSONALITY_NOT_LICENSED = -2147204589
E_LAMBDAGENPS_IO_GENERAL = -2147204588
E_LAMBDAGENPS_IO_TIMEOUT = -2147204587
E_LAMBDAGENPS_MODEL_NOT_SUPPORTED = -2147204586
E_LAMBDAGENPS_WRAPPED_DRIVER_ERROR = -2147204584
E_LAMBDAGENPS_INITIALIZE_ERROR = -2147205119
E_LAMBDAGENPS_CHECKSUM_ERROR = -2147205118
LambdaGenPSErrorCodesEnum = c_int # enum
class ILambdaGenPSOutput(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS output interface.'
    _iid_ = GUID('{8774DDD8-07B2-48C1-865D-AE866F8F17A8}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'LambdaGenPSOperatingModeEnum'
LambdaGenPSOperatingModeConstantVoltage = 0
LambdaGenPSOperatingModeConstantCurrent = 1
LambdaGenPSOperatingModeOff = 2
LambdaGenPSOperatingModeEnum = c_int # enum

# values for enumeration 'LambdaGenPSPowerOnModeEnum'
LambdaGenPSPowerOnModeSafeStart = 0
LambdaGenPSPowerOnModeAutoRestart = 1
LambdaGenPSPowerOnModeEnum = c_int # enum
ILambdaGenPSOutput._methods_ = [
    COMMETHOD([helpstring('Returns the measured current at the output terminals')], HRESULT, 'MeasureCurrent',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD([helpstring('Returns the measured voltage at the output terminals')], HRESULT, 'MeasureVoltage',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the voltage limit.')], HRESULT, 'VoltageLimit',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the voltage limit.')], HRESULT, 'VoltageLimit',
              ( ['in'], c_double, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the current limit.')], HRESULT, 'CurrentLimit',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the current limit.')], HRESULT, 'CurrentLimit',
              ( ['in'], c_double, 'Val' )),
    COMMETHOD(['propget', helpstring('Enables or disables the power supply output.')], HRESULT, 'Enabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Val' )),
    COMMETHOD(['propput', helpstring('Enables or disables the power supply output.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets the operating mode for the power supply.')], HRESULT, 'OperatingMode',
              ( ['out', 'retval'], POINTER(LambdaGenPSOperatingModeEnum), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the mode than controls how the supply behaves at power-on.')], HRESULT, 'PowerOnMode',
              ( ['out', 'retval'], POINTER(LambdaGenPSPowerOnModeEnum), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the mode than controls how the supply behaves at power-on.')], HRESULT, 'PowerOnMode',
              ( ['in'], LambdaGenPSPowerOnModeEnum, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the over-voltage protection level.')], HRESULT, 'OVPLimit',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the over-voltage protection level.')], HRESULT, 'OVPLimit',
              ( ['in'], c_double, 'Val' )),
    COMMETHOD(['propget', helpstring('Indicates if an over-voltage protection fault has occurred.')], HRESULT, 'OverVoltageTripped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the under-voltage limit.')], HRESULT, 'UnderVoltageLimit',
              ( ['out', 'retval'], POINTER(c_double), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the under-voltage limit.')], HRESULT, 'UnderVoltageLimit',
              ( ['in'], c_double, 'Val' )),
    COMMETHOD(['propget', helpstring('Enables or disables foldback protection.')], HRESULT, 'FoldbackProtectionEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Val' )),
    COMMETHOD(['propput', helpstring('Enables or disables foldback protection.')], HRESULT, 'FoldbackProtectionEnabled',
              ( ['in'], VARIANT_BOOL, 'Val' )),
    COMMETHOD(['propget', helpstring('Reports if a foldback protection fault has occurred.')], HRESULT, 'FoldbackTripped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Val' )),
]
################################################################
## code template for ILambdaGenPSOutput implementation
##class ILambdaGenPSOutput_Impl(object):
##    def MeasureCurrent(self):
##        'Returns the measured current at the output terminals'
##        #return Val
##
##    def MeasureVoltage(self):
##        'Returns the measured voltage at the output terminals'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the voltage limit.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the voltage limit.'
##    VoltageLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the current limit.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the current limit.'
##    CurrentLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Enables or disables the power supply output.'
##        #return Val
##    def _set(self, Val):
##        'Enables or disables the power supply output.'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OperatingMode(self):
##        'Gets the operating mode for the power supply.'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the mode than controls how the supply behaves at power-on.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the mode than controls how the supply behaves at power-on.'
##    PowerOnMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the over-voltage protection level.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the over-voltage protection level.'
##    OVPLimit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OverVoltageTripped(self):
##        'Indicates if an over-voltage protection fault has occurred.'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the under-voltage limit.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the under-voltage limit.'
##    UnderVoltageLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Enables or disables foldback protection.'
##        #return Val
##    def _set(self, Val):
##        'Enables or disables foldback protection.'
##    FoldbackProtectionEnabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FoldbackTripped(self):
##        'Reports if a foldback protection fault has occurred.'
##        #return Val
##

class ILambdaGenPSStatusStatusByte(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS status byte interface.'
    _iid_ = GUID('{9319CCB4-F539-496F-8768-7952B22F1D79}')
    _idlflags_ = ['oleautomation']
ILambdaGenPSStatusStatusByte._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the value of the instrument status byte.')], HRESULT, 'ConditionRegister',
              ( ['out', 'retval'], POINTER(c_ubyte), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the service request enable register.')], HRESULT, 'EnableRegister',
              ( ['out', 'retval'], POINTER(c_ubyte), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the service request enable register.')], HRESULT, 'EnableRegister',
              ( ['in'], c_ubyte, 'Val' )),
]
################################################################
## code template for ILambdaGenPSStatusStatusByte implementation
##class ILambdaGenPSStatusStatusByte_Impl(object):
##    @property
##    def ConditionRegister(self):
##        'Gets the value of the instrument status byte.'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the service request enable register.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the service request enable register.'
##    EnableRegister = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'LambdaGenPSCommandModeEnum'
LambdaGenPSCommandModeLocal = 0
LambdaGenPSCommandModeRemote = 1
LambdaGenPSCommandModeLocalLockout = 2
LambdaGenPSCommandModeEnum = c_int # enum
class ILambdaGenPSStatusOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS operation status interface.'
    _iid_ = GUID('{1421737E-7CBD-42F8-BCE6-E1F7C22792F9}')
    _idlflags_ = ['oleautomation']
ILambdaGenPSStatusOperation._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the operation condition register (for LAN or GPIB) or the status condition register (for RS-232).')], HRESULT, 'ConditionRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value of the operation status enable register (for LAN or GPIB) or the status enable register (for RS-232).')], HRESULT, 'EnableRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value of the operation status enable register (for LAN or GPIB) or the status enable register (for RS-232).')], HRESULT, 'EnableRegister',
              ( ['in'], c_short, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets the value of the operation event register (for LAN or GPIB) or the status event register (for RS-232).')], HRESULT, 'EventRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
]
################################################################
## code template for ILambdaGenPSStatusOperation implementation
##class ILambdaGenPSStatusOperation_Impl(object):
##    @property
##    def ConditionRegister(self):
##        'Gets the operation condition register (for LAN or GPIB) or the status condition register (for RS-232).'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the value of the operation status enable register (for LAN or GPIB) or the status enable register (for RS-232).'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the value of the operation status enable register (for LAN or GPIB) or the status enable register (for RS-232).'
##    EnableRegister = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EventRegister(self):
##        'Gets the value of the operation event register (for LAN or GPIB) or the status event register (for RS-232).'
##        #return Val
##

class ILambdaGenPSMultiDrop(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'ILambdaGenPS multi-drop interface.'
    _iid_ = GUID('{D11727F4-B588-4649-8CF7-1641ADA291AD}')
    _idlflags_ = ['oleautomation']
ILambdaGenPSMultiDrop._methods_ = [
    COMMETHOD([helpstring('Select one power supply in a multi-drop chain.')], HRESULT, 'Select',
              ( ['in'], c_int, 'Address' )),
    COMMETHOD([helpstring('Returns the RS-485 address of the currently selected instrument in a multi-drop chain.')], HRESULT, 'QuerySelected',
              ( ['out', 'retval'], POINTER(c_int), 'Val' )),
    COMMETHOD([helpstring('Resets all devices on a multi-drop chain.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('Recalls a previously saved instrument setup for all supplies on a multi-drop chain.')], HRESULT, 'RecallState',
              ( ['in'], c_int, 'State' )),
    COMMETHOD([helpstring('Saves the current instrument settings to the specified state for all supplies on a multi-drop chain.')], HRESULT, 'SaveState',
              ( ['in'], c_int, 'State' )),
    COMMETHOD(['propput', helpstring('Sets the voltage limit for all power supplies on a multi-drop chain.')], HRESULT, 'VoltageLimit',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring('Sets the current limit for all supplies on a multi-drop chain.')], HRESULT, 'CurrentLimit',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring('Enables or disables the power supply output for all supplies on a multi-drop chain.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for ILambdaGenPSMultiDrop implementation
##class ILambdaGenPSMultiDrop_Impl(object):
##    def Select(self, Address):
##        'Select one power supply in a multi-drop chain.'
##        #return 
##
##    def QuerySelected(self):
##        'Returns the RS-485 address of the currently selected instrument in a multi-drop chain.'
##        #return Val
##
##    def Reset(self):
##        'Resets all devices on a multi-drop chain.'
##        #return 
##
##    def RecallState(self, State):
##        'Recalls a previously saved instrument setup for all supplies on a multi-drop chain.'
##        #return 
##
##    def SaveState(self, State):
##        'Saves the current instrument settings to the specified state for all supplies on a multi-drop chain.'
##        #return 
##
##    def _set(self, rhs):
##        'Sets the voltage limit for all power supplies on a multi-drop chain.'
##    VoltageLimit = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        'Sets the current limit for all supplies on a multi-drop chain.'
##    CurrentLimit = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        'Enables or disables the power supply output for all supplies on a multi-drop chain.'
##    Enabled = property(fset = _set, doc = _set.__doc__)
##

class ILambdaGenPSSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS event interface.'
    _iid_ = GUID('{AADEC16C-C4CA-428D-9D5F-471D34F60FC5}')
    _idlflags_ = ['oleautomation']
class __error_hreftype_25__(Structure):
    pass
ILambdaGenPSSystem._methods_ = [
    COMMETHOD([helpstring('Recalls a previously saved instrument setup.')], HRESULT, 'RecallState',
              ( ['in'], c_int, 'State' )),
    COMMETHOD([helpstring('Saves the current instrument settings to the specified state.')], HRESULT, 'SaveState',
              ( ['in'], c_int, 'State' )),
    COMMETHOD([helpstring('This function clears the instrument error queue.')], HRESULT, 'ClearErrorQueue'),
    COMMETHOD(['propget', helpstring('Returns a pointer to the VISA-COM IFormattedIO interface.')], HRESULT, 'DirectIO',
              ( ['out', 'retval'], POINTER(POINTER(__error_hreftype_25__)), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the command mode for operating the instrument.')], HRESULT, 'CommandMode',
              ( ['out', 'retval'], POINTER(LambdaGenPSCommandModeEnum), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the command mode for operating the instrument.')], HRESULT, 'CommandMode',
              ( ['in'], LambdaGenPSCommandModeEnum, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets the SCPI version implemented.')], HRESULT, 'ScpiVersion',
              ( ['out', 'retval'], POINTER(BSTR), 'Val' )),
]
################################################################
## code template for ILambdaGenPSSystem implementation
##class ILambdaGenPSSystem_Impl(object):
##    def RecallState(self, State):
##        'Recalls a previously saved instrument setup.'
##        #return 
##
##    def SaveState(self, State):
##        'Saves the current instrument settings to the specified state.'
##        #return 
##
##    def ClearErrorQueue(self):
##        'This function clears the instrument error queue.'
##        #return 
##
##    @property
##    def DirectIO(self):
##        'Returns a pointer to the VISA-COM IFormattedIO interface.'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the command mode for operating the instrument.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the command mode for operating the instrument.'
##    CommandMode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ScpiVersion(self):
##        'Gets the SCPI version implemented.'
##        #return Val
##

class LambdaGenPS(CoClass):
    _reg_clsid_ = GUID('{C4ED772B-1E8A-40DE-A513-B69916CE588D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{46196824-7910-40F3-B1E2-0CC6AFA9029C}', 3, 1)
class ILambdaGenPS(comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriver):
    _case_insensitive_ = True
    'LambdaGenPS root interface.'
    _iid_ = GUID('{D7FAFBDE-9660-472C-A458-ABEE341A141A}')
    _idlflags_ = ['oleautomation']
class ILambdaGenPSStatus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS status interface.'
    _iid_ = GUID('{5062A058-C57E-4F3A-8EF0-74A13136ACC5}')
    _idlflags_ = ['oleautomation']
class ILambdaGenPSStatusQuestionable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS questionable status interface.'
    _iid_ = GUID('{F9B32B6D-F4C9-42AB-A3EE-574201C8AB24}')
    _idlflags_ = ['oleautomation']
class ILambdaGenPSStatusStandardEvent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'LambdaGenPS standard event status interface.'
    _iid_ = GUID('{3DD361EE-A5EA-487A-A61D-45B0BD444EA8}')
    _idlflags_ = ['oleautomation']
LambdaGenPS._com_interfaces_ = [ILambdaGenPS, comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriver, comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriverOperation, comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriverIdentity, comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviComponentIdentity, comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriverUtility, comtypes.gen._47ED5121_A398_11D4_BA58_000064657374_0_2_0.IIviDCPwrOutputs, comtypes.gen._47ED5121_A398_11D4_BA58_000064657374_0_2_0.IIviDCPwrTrigger, comtypes.gen._47ED5121_A398_11D4_BA58_000064657374_0_2_0.IIviDCPwr, ILambdaGenPSSystem, ILambdaGenPSStatus, ILambdaGenPSStatusOperation, ILambdaGenPSStatusQuestionable, ILambdaGenPSStatusStandardEvent, ILambdaGenPSStatusStatusByte, ILambdaGenPSOutput, ILambdaGenPSMultiDrop]

ILambdaGenPSStatusQuestionable._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the questionable condition register (for GPIB and LAN) or the fault condition register (for RS-232).')], HRESULT, 'ConditionRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value of the questionable status enable register for (LAN or GPIB) or the fault enable register (for RS-232);')], HRESULT, 'EnableRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value of the questionable status enable register for (LAN or GPIB) or the fault enable register (for RS-232);')], HRESULT, 'EnableRegister',
              ( ['in'], c_short, 'Val' )),
    COMMETHOD(['propget', helpstring('Gets the value of the questionable event register (for LAN or GPIB) or the fault event register (for RS-232);')], HRESULT, 'EventRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
]
################################################################
## code template for ILambdaGenPSStatusQuestionable implementation
##class ILambdaGenPSStatusQuestionable_Impl(object):
##    @property
##    def ConditionRegister(self):
##        'Gets the questionable condition register (for GPIB and LAN) or the fault condition register (for RS-232).'
##        #return Val
##
##    def _get(self):
##        'Gets or sets the value of the questionable status enable register for (LAN or GPIB) or the fault enable register (for RS-232);'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the value of the questionable status enable register for (LAN or GPIB) or the fault enable register (for RS-232);'
##    EnableRegister = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EventRegister(self):
##        'Gets the value of the questionable event register (for LAN or GPIB) or the fault event register (for RS-232);'
##        #return Val
##

ILambdaGenPSStatus._methods_ = [
    COMMETHOD([helpstring('This function that will enable some of the events for the operational and all of the events for the questionable registers for LAN and GPIB instruments. For serial connections, this command enables all events in the fault and status registers.')], HRESULT, 'EnableAll'),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSStatusOperation interface.')], HRESULT, 'Operation',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSStatusOperation)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSStatusQuestionable interface.')], HRESULT, 'Questionable',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSStatusQuestionable)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSStatusStandardEvent interface.')], HRESULT, 'StandardEvent',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSStatusStandardEvent)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSStatusStatusByte interface.')], HRESULT, 'StatusByte',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSStatusStatusByte)), 'Val' )),
]
################################################################
## code template for ILambdaGenPSStatus implementation
##class ILambdaGenPSStatus_Impl(object):
##    def EnableAll(self):
##        'This function that will enable some of the events for the operational and all of the events for the questionable registers for LAN and GPIB instruments. For serial connections, this command enables all events in the fault and status registers.'
##        #return 
##
##    @property
##    def Operation(self):
##        'Pointer to LambdaGenPSStatusOperation interface.'
##        #return Val
##
##    @property
##    def Questionable(self):
##        'Pointer to LambdaGenPSStatusQuestionable interface.'
##        #return Val
##
##    @property
##    def StandardEvent(self):
##        'Pointer to LambdaGenPSStatusStandardEvent interface.'
##        #return Val
##
##    @property
##    def StatusByte(self):
##        'Pointer to LambdaGenPSStatusStatusByte interface.'
##        #return Val
##

class LambdaGenPSOutput(CoClass):
    _reg_clsid_ = GUID('{C2CFDB4A-9F22-4060-A0A1-634456D96A23}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{46196824-7910-40F3-B1E2-0CC6AFA9029C}', 3, 1)
LambdaGenPSOutput._com_interfaces_ = [comtypes.gen._47ED5121_A398_11D4_BA58_000064657374_0_2_0.IIviDCPwrOutput]

ILambdaGenPS._methods_ = [
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSSystem interface.')], HRESULT, 'System',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSSystem)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSStatus interface.')], HRESULT, 'Status',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSStatus)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSOutput interface.')], HRESULT, 'Output',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSOutput)), 'Val' )),
    COMMETHOD(['propget', helpstring('Pointer to LambdaGenPSMultiDrop interface.')], HRESULT, 'MultiDrop',
              ( ['out', 'retval'], POINTER(POINTER(ILambdaGenPSMultiDrop)), 'Val' )),
]
################################################################
## code template for ILambdaGenPS implementation
##class ILambdaGenPS_Impl(object):
##    @property
##    def System(self):
##        'Pointer to LambdaGenPSSystem interface.'
##        #return Val
##
##    @property
##    def Status(self):
##        'Pointer to LambdaGenPSStatus interface.'
##        #return Val
##
##    @property
##    def Output(self):
##        'Pointer to LambdaGenPSOutput interface.'
##        #return Val
##
##    @property
##    def MultiDrop(self):
##        'Pointer to LambdaGenPSMultiDrop interface.'
##        #return Val
##

ILambdaGenPSStatusStandardEvent._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the standard event status enable register.')], HRESULT, 'EnableRegister',
              ( ['out', 'retval'], POINTER(c_ubyte), 'Val' )),
    COMMETHOD(['propput', helpstring('Gets or sets the standard event status enable register.')], HRESULT, 'EnableRegister',
              ( ['in'], c_ubyte, 'Val' )),
    COMMETHOD(['propget', helpstring('Reads and clears the event status enable register.')], HRESULT, 'EventRegister',
              ( ['out', 'retval'], POINTER(c_short), 'Val' )),
]
################################################################
## code template for ILambdaGenPSStatusStandardEvent implementation
##class ILambdaGenPSStatusStandardEvent_Impl(object):
##    def _get(self):
##        'Gets or sets the standard event status enable register.'
##        #return Val
##    def _set(self, Val):
##        'Gets or sets the standard event status enable register.'
##    EnableRegister = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EventRegister(self):
##        'Reads and clears the event status enable register.'
##        #return Val
##

class Library(object):
    'IVI LambdaGenPS 3.1 Type Library'
    name = 'LambdaGenPSLib'
    _reg_typelib_ = ('{46196824-7910-40F3-B1E2-0CC6AFA9029C}', 3, 1)

__all__ = [ 'LambdaGenPSPowerOnModeAutoRestart',
           'E_LAMBDAGENPS_IO_TIMEOUT', 'LambdaGenPSCommandModeRemote',
           '__error_hreftype_25__', 'ILambdaGenPSStatusStatusByte',
           'E_LAMBDAGENPS_MODEL_NOT_SUPPORTED',
           'ILambdaGenPSStatusStandardEvent',
           'LambdaGenPSErrorCodesEnum', 'ILambdaGenPS',
           'ILambdaGenPSStatus',
           'E_LAMBDAGENPS_PERSONALITY_NOT_ACTIVE',
           'LambdaGenPSOperatingModeEnum',
           'E_LAMBDAGENPS_INITIALIZE_ERROR',
           'LambdaGenPSPowerOnModeSafeStart',
           'LambdaGenPSCommandModeLocal',
           'E_LAMBDAGENPS_PERSONALITY_NOT_LICENSED',
           'LambdaGenPSCommandModeEnum',
           'E_LAMBDAGENPS_PERSONALITY_NOT_INSTALLED',
           'LambdaGenPSPowerOnModeEnum', 'LambdaGenPSOutput',
           'E_LAMBDAGENPS_IO_GENERAL', 'ILambdaGenPSOutput',
           'LambdaGenPSOperatingModeConstantCurrent',
           'ILambdaGenPSMultiDrop',
           'LambdaGenPSCommandModeLocalLockout',
           'ILambdaGenPSStatusQuestionable', 'ILambdaGenPSSystem',
           'E_LAMBDAGENPS_WRAPPED_DRIVER_ERROR',
           'E_LAMBDAGENPS_CHECKSUM_ERROR',
           'ILambdaGenPSStatusOperation', 'LambdaGenPS',
           'LambdaGenPSOperatingModeOff',
           'LambdaGenPSOperatingModeConstantVoltage']
from comtypes import _check_version; _check_version('')
