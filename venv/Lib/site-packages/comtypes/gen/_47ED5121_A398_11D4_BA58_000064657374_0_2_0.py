# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files (x86)\\IVI Foundation\\IVI\\Bin\\IviDCPwrTypeLib.dll'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import BSTR
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from ctypes.wintypes import VARIANT_BOOL



# values for enumeration 'IviDCPwrMeasurementTypeEnum'
IviDCPwrMeasurementCurrent = 0
IviDCPwrMeasurementVoltage = 1
IviDCPwrMeasurementTypeEnum = c_int # enum
class IIviDCPwrOutputs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'IviDCPwr class-compliant IIviDCPwrOutputs collection interface'
    _iid_ = GUID('{47ED51B7-A398-11D4-BA58-000064657374}')
    _idlflags_ = ['oleautomation']
class IIviDCPwrOutput(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'IviDCPwr class-compliant IIviDCPwrOutput interface'
    _iid_ = GUID('{47ED51B8-A398-11D4-BA58-000064657374}')
    _idlflags_ = ['oleautomation']
IIviDCPwrOutputs._methods_ = [
    COMMETHOD(['propget', helpstring('Pointer to a class-compliant IIviDCPwrOutput interface.  The OutputName parameter may be a string defined by the driver or supplied as a virtual name in the configuration store.')], HRESULT, 'Item',
              ( ['in'], BSTR, 'OutputName' ),
              ( ['out', 'retval'], POINTER(POINTER(IIviDCPwrOutput)), 'pVal' )),
    COMMETHOD(['propget', helpstring('property Count contains how many outputs this DC power supply has. It is also the maximum valid value for the Index parameter to the Name method of the Outputs interface.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring('property Name is the string associated by the driver to the value of Index without ever referring to the configuration store.')], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for IIviDCPwrOutputs implementation
##class IIviDCPwrOutputs_Impl(object):
##    @property
##    def Item(self, OutputName):
##        'Pointer to a class-compliant IIviDCPwrOutput interface.  The OutputName parameter may be a string defined by the driver or supplied as a virtual name in the configuration store.'
##        #return pVal
##
##    @property
##    def Count(self):
##        'property Count contains how many outputs this DC power supply has. It is also the maximum valid value for the Index parameter to the Name method of the Outputs interface.'
##        #return pVal
##
##    @property
##    def Name(self, Index):
##        'property Name is the string associated by the driver to the value of Index without ever referring to the configuration store.'
##        #return Name
##


# values for enumeration 'IviDCPwrCurrentLimitBehaviorEnum'
IviDCPwrCurrentLimitRegulate = 0
IviDCPwrCurrentLimitTrip = 1
IviDCPwrCurrentLimitBehaviorEnum = c_int # enum
class IIviDCPwr(comtypes.gen._47ED5120_A398_11D4_BA58_000064657374_0_1_0.IIviDriver):
    _case_insensitive_ = True
    'IviDCPwr class-compliant root interface'
    _iid_ = GUID('{47ED51B6-A398-11D4-BA58-000064657374}')
    _idlflags_ = ['oleautomation']
class IIviDCPwrTrigger(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'IviDCPwr class-compliant IIviDCPwrTrigger interface'
    _iid_ = GUID('{47ED51B9-A398-11D4-BA58-000064657374}')
    _idlflags_ = ['oleautomation']
IIviDCPwr._methods_ = [
    COMMETHOD(['propget', helpstring('Pointer to the class-compliant IIviDCPwrOutputs interface')], HRESULT, 'Outputs',
              ( ['out', 'retval'], POINTER(POINTER(IIviDCPwrOutputs)), 'pVal' )),
    COMMETHOD(['propget', helpstring('Pointer to the class-compliant IIviDCPwrTrigger interface')], HRESULT, 'Trigger',
              ( ['out', 'retval'], POINTER(POINTER(IIviDCPwrTrigger)), 'pVal' )),
]
################################################################
## code template for IIviDCPwr implementation
##class IIviDCPwr_Impl(object):
##    @property
##    def Outputs(self):
##        'Pointer to the class-compliant IIviDCPwrOutputs interface'
##        #return pVal
##
##    @property
##    def Trigger(self):
##        'Pointer to the class-compliant IIviDCPwrTrigger interface'
##        #return pVal
##

IIviDCPwrTrigger._methods_ = [
    COMMETHOD([helpstring('method Abort returns the power supply to the ignore triggers state if the power supply is currently waiting for a trigger to change the output signal.  If the power supply is not waiting for a trigger, this method does nothing.')], HRESULT, 'Abort'),
    COMMETHOD([helpstring('method Initiate causes the power supply to wait for a trigger if the power supply is not currently waiting for a trigger. If the power supply is already waiting for a trigger, this method does nothing ')], HRESULT, 'Initiate'),
    COMMETHOD([helpstring('method Send Software Trigger supplies a trigger signal when the trigger source is set to Software Trigger')], HRESULT, 'SendSoftwareTrigger'),
]
################################################################
## code template for IIviDCPwrTrigger implementation
##class IIviDCPwrTrigger_Impl(object):
##    def Abort(self):
##        'method Abort returns the power supply to the ignore triggers state if the power supply is currently waiting for a trigger to change the output signal.  If the power supply is not waiting for a trigger, this method does nothing.'
##        #return 
##
##    def Initiate(self):
##        'method Initiate causes the power supply to wait for a trigger if the power supply is not currently waiting for a trigger. If the power supply is already waiting for a trigger, this method does nothing '
##        #return 
##
##    def SendSoftwareTrigger(self):
##        'method Send Software Trigger supplies a trigger signal when the trigger source is set to Software Trigger'
##        #return 
##


# values for enumeration 'IviDCPwrErrorCodesEnum'
E_IVIDCPWR_TRIGGER_NOT_SOFTWARE = -2147217407
IviDCPwrErrorCodesEnum = c_int # enum

# values for enumeration 'IviDCPwrRangeTypeEnum'
IviDCPwrRangeCurrent = 0
IviDCPwrRangeVoltage = 1
IviDCPwrRangeTypeEnum = c_int # enum

# values for enumeration 'IviDCPwrOutputStateEnum'
IviDCPwrOutputConstantVoltage = 0
IviDCPwrOutputConstantCurrent = 1
IviDCPwrOutputOverVoltage = 2
IviDCPwrOutputOverCurrent = 3
IviDCPwrOutputUnregulated = 4
IviDCPwrOutputStateEnum = c_int # enum
class Library(object):
    'IviDCPwr 2.0 Type Library'
    name = 'IviDCPwrLib'
    _reg_typelib_ = ('{47ED5121-A398-11D4-BA58-000064657374}', 2, 0)


# values for enumeration 'IviDCPwrTriggerSourceEnum'
IviDCPwrTriggerSourceImmediate = 0
IviDCPwrTriggerSourceExternal = 1
IviDCPwrTriggerSourceSwTrigFunc = 2
IviDCPwrTriggerSourceTTL0 = 3
IviDCPwrTriggerSourceTTL1 = 4
IviDCPwrTriggerSourceTTL2 = 5
IviDCPwrTriggerSourceTTL3 = 6
IviDCPwrTriggerSourceTTL4 = 7
IviDCPwrTriggerSourceTTL5 = 8
IviDCPwrTriggerSourceTTL6 = 9
IviDCPwrTriggerSourceTTL7 = 10
IviDCPwrTriggerSourceECL0 = 11
IviDCPwrTriggerSourceECL1 = 12
IviDCPwrTriggerSourcePXIStar = 13
IviDCPwrTriggerSourceRTSI0 = 14
IviDCPwrTriggerSourceRTSI1 = 15
IviDCPwrTriggerSourceRTSI2 = 16
IviDCPwrTriggerSourceRTSI3 = 17
IviDCPwrTriggerSourceRTSI4 = 18
IviDCPwrTriggerSourceRTSI5 = 19
IviDCPwrTriggerSourceRTSI6 = 20
IviDCPwrTriggerSourceEnum = c_int # enum
IIviDCPwrOutput._methods_ = [
    COMMETHOD([helpstring('method Configure Current Limit specifies the output current limit value and the behavior of the power supply when the output current is greater than or equal to that value.')], HRESULT, 'ConfigureCurrentLimit',
              ( ['in'], IviDCPwrCurrentLimitBehaviorEnum, 'Behavior' ),
              ( ['in'], c_double, 'Limit' )),
    COMMETHOD([helpstring("method Configure Range specifies the output's range, either current or voltage.")], HRESULT, 'ConfigureRange',
              ( ['in'], IviDCPwrRangeTypeEnum, 'RangeType' ),
              ( ['in'], c_double, 'Range' )),
    COMMETHOD([helpstring('method Configure OVP specifies the over-voltage limit and the behavior of the power supply when the output voltage is greater than or equal to the limit.')], HRESULT, 'ConfigureOVP',
              ( ['in'], VARIANT_BOOL, 'Enabled' ),
              ( ['in'], c_double, 'Limit' )),
    COMMETHOD([helpstring('method Measure takes a measurement on the output signal and returns the measured value.')], HRESULT, 'Measure',
              ( ['in'], IviDCPwrMeasurementTypeEnum, 'MeasurementType' ),
              ( ['out', 'retval'], POINTER(c_double), 'Measurement' )),
    COMMETHOD([helpstring('method Query Current Limit Max returns the maximum programmable current limit that the power supply accepts for a particular voltage level on an output.')], HRESULT, 'QueryCurrentLimitMax',
              ( ['in'], c_double, 'VoltageLevel' ),
              ( ['out', 'retval'], POINTER(c_double), 'MaxCurrentLimit' )),
    COMMETHOD([helpstring('method Query State returns whether the power supply is in a particular output state.')], HRESULT, 'QueryState',
              ( ['in'], IviDCPwrOutputStateEnum, 'OutputState' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'InState' )),
    COMMETHOD([helpstring('method Query Voltage Level Max returns the maximum programmable voltage level that the power supply accepts for a particular current limit on an output.')], HRESULT, 'QueryVoltageLevelMax',
              ( ['in'], c_double, 'CurrentLimit' ),
              ( ['out', 'retval'], POINTER(c_double), 'MaxVoltageLevel' )),
    COMMETHOD([helpstring("method Reset Output Protection resets the power supply's output protection after an over-voltage or over-current condition occurs.")], HRESULT, 'ResetOutputProtection'),
    COMMETHOD(['propput', helpstring('property Enabled specifies whether the signal the power supply produces appears at the output connector.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Enabled specifies whether the signal the power supply produces appears at the output connector.')], HRESULT, 'Enabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring('property Source specifies the trigger source.')], HRESULT, 'TriggerSource',
              ( ['in'], IviDCPwrTriggerSourceEnum, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Source specifies the trigger source.')], HRESULT, 'TriggerSource',
              ( ['out', 'retval'], POINTER(IviDCPwrTriggerSourceEnum), 'pVal' )),
    COMMETHOD(['propput', helpstring('property Triggered Current Limit specifies the value to which the power supply sets the current limit after a trigger event occurs.')], HRESULT, 'TriggeredCurrentLimit',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Triggered Current Limit specifies the value to which the power supply sets the current limit after a trigger event occurs.')], HRESULT, 'TriggeredCurrentLimit',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring('property Triggerd Voltage Level specifies the value to  which the power supply sets the voltage level after a trigger event occurs. ')], HRESULT, 'TriggeredVoltageLevel',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Triggerd Voltage Level specifies the value to  which the power supply sets the voltage level after a trigger event occurs. ')], HRESULT, 'TriggeredVoltageLevel',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring('property Voltage Level specifies the voltage level the DC power supply attempts to generate. The units are Volts.')], HRESULT, 'VoltageLevel',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Voltage Level specifies the voltage level the DC power supply attempts to generate. The units are Volts.')], HRESULT, 'VoltageLevel',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring('propety Current Limit specifies the output current limit. The units are Amps.')], HRESULT, 'CurrentLimit',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring('propety Current Limit specifies the output current limit. The units are Amps.')], HRESULT, 'CurrentLimit',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring('property Current Limit Behavior specifies the behavior of the power supply when the output current is equal to or greater than the value of the Current Limit property.')], HRESULT, 'CurrentLimitBehavior',
              ( ['in'], IviDCPwrCurrentLimitBehaviorEnum, 'pVal' )),
    COMMETHOD(['propget', helpstring('property Current Limit Behavior specifies the behavior of the power supply when the output current is equal to or greater than the value of the Current Limit property.')], HRESULT, 'CurrentLimitBehavior',
              ( ['out', 'retval'], POINTER(IviDCPwrCurrentLimitBehaviorEnum), 'pVal' )),
    COMMETHOD(['propput', helpstring('property OVP Limit specifies the voltage the power supply allows. The units are Volts.')], HRESULT, 'OVPLimit',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring('property OVP Limit specifies the voltage the power supply allows. The units are Volts.')], HRESULT, 'OVPLimit',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring('property OVP Enabled specifies whether the power supply provides over-voltage protection. If this property is set to True, the power supply disables the output when the output voltage is greater than or equal to the OVP Limit.')], HRESULT, 'OVPEnabled',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring('property OVP Enabled specifies whether the power supply provides over-voltage protection. If this property is set to True, the power supply disables the output when the output voltage is greater than or equal to the OVP Limit.')], HRESULT, 'OVPEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
]
################################################################
## code template for IIviDCPwrOutput implementation
##class IIviDCPwrOutput_Impl(object):
##    def ConfigureCurrentLimit(self, Behavior, Limit):
##        'method Configure Current Limit specifies the output current limit value and the behavior of the power supply when the output current is greater than or equal to that value.'
##        #return 
##
##    def ConfigureRange(self, RangeType, Range):
##        "method Configure Range specifies the output's range, either current or voltage."
##        #return 
##
##    def ConfigureOVP(self, Enabled, Limit):
##        'method Configure OVP specifies the over-voltage limit and the behavior of the power supply when the output voltage is greater than or equal to the limit.'
##        #return 
##
##    def Measure(self, MeasurementType):
##        'method Measure takes a measurement on the output signal and returns the measured value.'
##        #return Measurement
##
##    def QueryCurrentLimitMax(self, VoltageLevel):
##        'method Query Current Limit Max returns the maximum programmable current limit that the power supply accepts for a particular voltage level on an output.'
##        #return MaxCurrentLimit
##
##    def QueryState(self, OutputState):
##        'method Query State returns whether the power supply is in a particular output state.'
##        #return InState
##
##    def QueryVoltageLevelMax(self, CurrentLimit):
##        'method Query Voltage Level Max returns the maximum programmable voltage level that the power supply accepts for a particular current limit on an output.'
##        #return MaxVoltageLevel
##
##    def ResetOutputProtection(self):
##        "method Reset Output Protection resets the power supply's output protection after an over-voltage or over-current condition occurs."
##        #return 
##
##    def _get(self):
##        'property Enabled specifies whether the signal the power supply produces appears at the output connector.'
##        #return pVal
##    def _set(self, pVal):
##        'property Enabled specifies whether the signal the power supply produces appears at the output connector.'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property Source specifies the trigger source.'
##        #return pVal
##    def _set(self, pVal):
##        'property Source specifies the trigger source.'
##    TriggerSource = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property Triggered Current Limit specifies the value to which the power supply sets the current limit after a trigger event occurs.'
##        #return pVal
##    def _set(self, pVal):
##        'property Triggered Current Limit specifies the value to which the power supply sets the current limit after a trigger event occurs.'
##    TriggeredCurrentLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property Triggerd Voltage Level specifies the value to  which the power supply sets the voltage level after a trigger event occurs. '
##        #return pVal
##    def _set(self, pVal):
##        'property Triggerd Voltage Level specifies the value to  which the power supply sets the voltage level after a trigger event occurs. '
##    TriggeredVoltageLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property Voltage Level specifies the voltage level the DC power supply attempts to generate. The units are Volts.'
##        #return pVal
##    def _set(self, pVal):
##        'property Voltage Level specifies the voltage level the DC power supply attempts to generate. The units are Volts.'
##    VoltageLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'propety Current Limit specifies the output current limit. The units are Amps.'
##        #return pVal
##    def _set(self, pVal):
##        'propety Current Limit specifies the output current limit. The units are Amps.'
##    CurrentLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property Current Limit Behavior specifies the behavior of the power supply when the output current is equal to or greater than the value of the Current Limit property.'
##        #return pVal
##    def _set(self, pVal):
##        'property Current Limit Behavior specifies the behavior of the power supply when the output current is equal to or greater than the value of the Current Limit property.'
##    CurrentLimitBehavior = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property OVP Limit specifies the voltage the power supply allows. The units are Volts.'
##        #return pVal
##    def _set(self, pVal):
##        'property OVP Limit specifies the voltage the power supply allows. The units are Volts.'
##    OVPLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'property OVP Enabled specifies whether the power supply provides over-voltage protection. If this property is set to True, the power supply disables the output when the output voltage is greater than or equal to the OVP Limit.'
##        #return pVal
##    def _set(self, pVal):
##        'property OVP Enabled specifies whether the power supply provides over-voltage protection. If this property is set to True, the power supply disables the output when the output voltage is greater than or equal to the OVP Limit.'
##    OVPEnabled = property(_get, _set, doc = _set.__doc__)
##

__all__ = [ 'IviDCPwrOutputOverVoltage', 'IviDCPwrTriggerSourceTTL1',
           'IviDCPwrRangeVoltage', 'IviDCPwrErrorCodesEnum',
           'IviDCPwrMeasurementCurrent', 'IviDCPwrOutputUnregulated',
           'IviDCPwrMeasurementTypeEnum',
           'IviDCPwrOutputConstantVoltage',
           'IviDCPwrTriggerSourceEnum', 'IviDCPwrTriggerSourceRTSI5',
           'IviDCPwrOutputConstantCurrent',
           'IviDCPwrTriggerSourceTTL4', 'IviDCPwrTriggerSourceTTL5',
           'IviDCPwrTriggerSourceRTSI3', 'IviDCPwrOutputStateEnum',
           'IviDCPwrTriggerSourceRTSI0', 'IviDCPwrRangeCurrent',
           'IviDCPwrTriggerSourceSwTrigFunc',
           'IviDCPwrCurrentLimitRegulate',
           'IviDCPwrCurrentLimitBehaviorEnum',
           'IviDCPwrTriggerSourceTTL0', 'IviDCPwrTriggerSourceECL1',
           'IviDCPwrTriggerSourceTTL3',
           'IviDCPwrTriggerSourceExternal',
           'IviDCPwrTriggerSourceRTSI1', 'IIviDCPwrOutput',
           'IIviDCPwrOutputs', 'IviDCPwrCurrentLimitTrip',
           'IviDCPwrTriggerSourceTTL6', 'IIviDCPwrTrigger',
           'IviDCPwrTriggerSourceRTSI4', 'IviDCPwrTriggerSourceRTSI6',
           'E_IVIDCPWR_TRIGGER_NOT_SOFTWARE',
           'IviDCPwrMeasurementVoltage', 'IviDCPwrTriggerSourceTTL7',
           'IviDCPwrTriggerSourceECL0',
           'IviDCPwrTriggerSourceImmediate',
           'IviDCPwrTriggerSourceTTL2', 'IviDCPwrTriggerSourceRTSI2',
           'IviDCPwrTriggerSourcePXIStar',
           'IviDCPwrOutputOverCurrent', 'IviDCPwrRangeTypeEnum',
           'IIviDCPwr']
from comtypes import _check_version; _check_version('')
